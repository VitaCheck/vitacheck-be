// build.gradle (최종 안정화 버전 - platform 사용)
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5' // 이 플러그인은 유지하되, 사용 방식을 변경합니다.
}

group = 'com.vitacheck'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

subprojects {
    apply plugin: 'java'
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
}
repositories {
    mavenCentral()
}

configurations {
    all {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

dependencies {
    implementation project(":module-common")
    implementation project(":module-user")
    implementation project(":module-auth")
    implementation project(":module-product")
    implementation project(":module-notification")

    // ✅✅✅ 핵심 변경 사항: BOM을 platform 키워드로 직접 주입 ✅✅✅
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.1.1")

    // Spring Boot Starter
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // === AWS 의존성 (버전 없이 선언) ===
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-secrets-manager'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database
    runtimeOnly 'com.mysql:mysql-connector-j'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Swagger (OpenAPI)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Firebase
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
}

// Q-Type 클래스 생성 위치 지정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += querydslDir
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

test {
    useJUnitPlatform()
}

clean {
    delete file(querydslDir)
}