# 워크플로우의 이름을 지정합니다. GitHub 'Actions' 탭에 이 이름이 표시됩니다.
name: VitaCheck Backend CI/CD

# 이 워크플로우가 언제 실행될지를 정의하는 '트리거' 설정입니다.
on:
  push:
    branches: [ main ]  # develop 브랜치에 push 될 때

# 실제 수행할 작업(Job)들을 정의합니다.
jobs:
  # 'build' 작업: 기존과 동일
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      # 빌드된 JAR 파일을 Artifacts로 업로드
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: vitacheck-be-jar
          path: build/libs/vitacheck-be-0.0.1-SNAPSHOT.jar

  # 'deploy' 작업: 새로 추가된 부분
  deploy:
    runs-on: ubuntu-latest
    needs: build # 'build' 작업이 성공해야만 실행됨
    steps:
      # 빌드 작업에서 업로드한 JAR 파일을 다운로드
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: vitacheck-be-jar

      # SCP를 이용해 JAR 파일을 EC2 서버로 복사
      - name: Transfer JAR to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "vitacheck-be-0.0.1-SNAPSHOT.jar"
          target: "~/"

      # SSH를 이용해 EC2 서버에 접속하여 배포 스크립트 실행
      - name: Execute Deploy Script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # script에서 모든 export 구문을 제거합니다.
          script: 'sh ~/deploy.sh'
          command_timeout: 10m

      # 아래에 ClI 명령어를 사용하기 위한 Node 환경 세팅
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Swagger Json을 다운받아 Postman 업데이트
      # Swagger → Postman 자동 업데이트
      - name: Update Postman Collection
        run: |
          echo "🚀 Downloading latest Swagger JSON..."
          curl -s https://vita-check.com/v3/api-docs -o swagger.json
          
          echo "⚙️ Installing openapi-to-postmanv2..."
          npm install -g openapi-to-postmanv2@5.1.0
          
          echo "⚙️ Converting Swagger → Postman Collection (tag-based folders)..."
          openapi2postmanv2 -s swagger.json -o postman_collection.json -p --folderStrategy=tags
          
          echo "📦 Wrapping collection object..."
          jq -n --slurpfile data postman_collection.json '{collection: $data[0]}' > wrapped_postman.json
          
          echo "📤 Updating Postman collection..."
          curl --fail --show-error --silent \
            -X PUT "https://api.getpostman.com/collections/${{ secrets.POSTMAN_COLLECTION_ID }}" \
            -H "X-Api-Key: ${{ secrets.POSTMAN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @wrapped_postman.json
      